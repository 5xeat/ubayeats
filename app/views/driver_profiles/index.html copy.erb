<!DOCTYPE html>
<html>
  <head>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
    <script
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDTZhp28ugIRuNXoBcy5kb10PGYLN2P4zs&callback=initMap&libraries=places&v=weekly"
      defer
    ></script>
    
    <script>
      const getAddress = (address) => {
        return new Promise((resolve, reject) => {
          const geoCoder = new google.maps.Geocoder();
          geoCoder.geocode({ address }, (results, status) => {
            if (status === "OK") {
              console.log("results :>> ", results);
              resolve(results[0].geometry.location);
            } else {
              reject(status);
            }
          });
        });
      };
      

      const getCurrent = () => {
        return new Promise((resolve, reject) => {
          const pos = navigator.geolocation.getCurrentPosition(function (pos) {
            resolve({
              latitude: pos.coords.latitude,
              longitude: pos.coords.longitude,
            });
          });
        });
      };

      async function initMap() {
        const map = new google.maps.Map(document.getElementById("map"), {
          mapTypeControl: false,
          zoom: 20,
        });

        const position = await getCurrent();
        const { latitude, longitude } = position;

        let location = await getAddress(`${latitude}, ${longitude}`);

        map.setCenter(location);
        new AutocompleteDirectionsHandler(map);
      }

      class AutocompleteDirectionsHandler {
        constructor(map) {
          this.map = map;
          this.originPlaceId = "";
          this.destinationPlaceId = "";
          this.travelMode = google.maps.TravelMode.WALKING;
          this.directionsService = new google.maps.DirectionsService();
          this.directionsRenderer = new google.maps.DirectionsRenderer();
          this.directionsRenderer.setMap(map);
          const originInput = document.getElementById("origin-input");
          const destinationInput = document.getElementById("destination-input");

          const modeSelector = document.getElementById("mode-selector");
          const originAutocomplete = new google.maps.places.Autocomplete(
            originInput
          );
          // Specify just the place data fields that you need.
          originAutocomplete.setFields(["place_id"]);
          const destinationAutocomplete = new google.maps.places.Autocomplete(
            destinationInput
          );
          // Specify just the place data fields that you need.
          destinationAutocomplete.setFields(["place_id"]);
          this.setupClickListener(
            "changemode-walking",
            google.maps.TravelMode.WALKING
          );
          this.setupClickListener(
            "changemode-transit",
            google.maps.TravelMode.TRANSIT
          );
          this.setupClickListener(
            "changemode-driving",
            google.maps.TravelMode.DRIVING
          );
          this.setupPlaceChangedListener(originAutocomplete, "ORIG");
          this.setupPlaceChangedListener(destinationAutocomplete, "DEST");
          this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(
            originInput
          );
          this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(
            destinationInput
          );
          this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(
            modeSelector
          );
        }
        // Sets a listener on a radio button to change the filter type on Places
        // Autocomplete.
        setupClickListener(id, mode) {
          const radioButton = document.getElementById(id);
          radioButton.addEventListener("click", () => {
            console.log(this.originPlaceId);
            this.travelMode = mode;
            this.route();
          });
        }
        setupPlaceChangedListener(autocomplete, mode) {
          autocomplete.bindTo("bounds", this.map);
          autocomplete.addListener("place_changed", () => {
            const place = autocomplete.getPlace();

            if (!place.place_id) {
              window.alert("Please select an option from the dropdown list.");
              return;
            }

            if (mode === "ORIG") {
              this.originPlaceId = place.place_id;
            } else {
              this.destinationPlaceId = place.place_id;
            }
            this.route();
          });
        }
        route() {
          if (!this.originPlaceId || !this.destinationPlaceId) {
            return;
          }
          const me = this;
          this.directionsService.route(
            {
              origin: { placeId: this.originPlaceId },
              destination: { placeId: this.destinationPlaceId },
              travelMode: this.travelMode,
            },
            (response, status) => {
              if (status === "OK") {
                me.directionsRenderer.setDirections(response);
              } else {
                window.alert("Directions request failed due to " + status);
              }
            }
          );
        }
      }
    </script>
  </head>
  <body>
    <div style="display: none">
      <input
        id="origin-input"
        class="controls"
        type="text"
        placeholder="Enter an origin location"
      />

      <input
        id="destination-input"
        class="controls"
        type="text"
        placeholder="Enter a destination location"
      />

      <div id="mode-selector" class="controls">
        <input
          type="radio"
          name="type"
          id="changemode-walking"
          checked="checked"
        />
        <label for="changemode-walking">Walking</label>

        <input type="radio" name="type" id="changemode-transit" />
        <label for="changemode-transit">Transit</label>

        <input type="radio" name="type" id="changemode-driving" />
        <label for="changemode-driving">Driving</label>
      </div>
    </div>

    <div id="map"></div>
  </body>
</html>
