<!DOCTYPE html>
<html>
  <head>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBL-80hWXX74wWTTTjPIc3uNz_uUH5Wd-w&map_ids=c57b36ae7dbc5a40&callback=initMap&libraries=places&v=beta"
    defer>
    </script>
    
    <style>
      #map {
        height: calc(100vh - 100px);
        width: 100%;
      }
      .steps-list {
        position: absolute;
        bottom: 0;
        left: 0;
        z-index: 100;
      }
      .steps {
        background-color: rgba(255, 255, 255, 0.9);
        color: rgb(10, 6, 46);
        margin-bottom: 10px;
        padding: 5px 10px;
      }
    </style>
  </head>
  <body>
    <div class="flex main">
      <%= link_to '編輯外送員資料', edit_driver_profiles_path, class: 'btn' %>
      <div class="destination">
        <input
          id="destination-input"
          class="controls"
          type="text"
          placeholder="輸入店家..."
        />
        <button class="btn calc-btn">計算</button>
      </div>
      <div class="info flex">
        <p class="distance"></p>
        <p class="time"></p>
      </div>
    </div>

    <div class="steps-list"></div>

    <div id="map"></div>
  </body>
  <script>
    
    let map, marker, lat, lng, place, directionMarkers;
    directionMarkers =[];

    function initMap() {
      // 載入路線服務與路線顯示圖層
      let directionsService = new google.maps.DirectionsService();
      let directionsDisplay = new google.maps.DirectionsRenderer({polylineOptions:{strokeColor:"#EF4444",strokeWeight:5}, suppressMarkers: true});

      // 客製化使用者定位icon
      const icons = {
        start: {
          url: 'https://i.imgur.com/5UTYP4Q.png',
          scaledSize: new google.maps.Size(50, 50),
          origin: new google.maps.Point(0,0),
          anchor: new google.maps.Point(0, 0)
        },
        end: {
          path: google.maps.SymbolPath.CIRCLE,
          scale: 10,
          fillColor: 'white',
          strokeColor: 'white'
          // url: 'https://www.flaticon.com/svg/static/icons/svg/610/610365.svg',
          // scaledSize: new google.maps.Size(20, 20),
          // origin: new google.maps.Point(0,0),
          // anchor: new google.maps.Point(0, 0)
        }
      };

      navigator.geolocation.getCurrentPosition((position) => {
        console.log('getCurrentPosition')
        lat = position.coords.latitude;
        lng = position.coords.longitude;

        // 初始化地圖
        map = new google.maps.Map(document.getElementById('map'), {
            zoom: 18,
            center: { lat: lat, lng: lng },
            mapId: 'c57b36ae7dbc5a40',
            mapTypeControl: false,
            streetViewControl: false,
            zoomControl: false,
            fullscreenControl: false
        });
        marker = new google.maps.Marker({
            position: { lat: lat, lng: lng },
            map: map,
            animation: google.maps.Animation.BOUNCE,
            icon: icons.start
        });

        if (place !== undefined){
          directionMap()
        }

        const btn = document.querySelector(".calc-btn")
        const destinationInput = document.getElementById("destination-input");
        const destinationAutocomplete = new google.maps.places.Autocomplete(destinationInput);
        btn.addEventListener("click", (e) => {
          if (destinationInput.value !== ""){
            // 取得終點位置的placeID
            place = destinationAutocomplete.getPlace();
            directionMap()
          }
        })

        function directionMap(){
          // 計算路程時間距離
          const service = new google.maps.DistanceMatrixService();
          service.getDistanceMatrix(
            {
              origins: [{ lat: lat, lng: lng }],
              destinations: [{placeId: place.place_id}],
              travelMode: google.maps.TravelMode.DRIVING,
              unitSystem: google.maps.UnitSystem.METRIC,
              avoidHighways: true,
              avoidTolls: true,
            },
            (response, status) => {
              if (status !== "OK") {
                console.log(status);
              } else {
                const distance = response.rows[0].elements[0].distance.text;
                const time = response.rows[0].elements[0].duration.text;
                document.querySelector('.distance').innerText = distance;
                document.querySelector('.time').innerText = time;
              }
            }
          )

          // 放置路線圖層
          directionsDisplay.setMap(map);

          // 路線相關設定
          let request = {
            origin: { lat: lat, lng: lng },
            destination: { placeId: place.place_id },
            avoidFerries: true,
            avoidHighways: true,
            avoidTolls: true,
            travelMode: 'DRIVING'
          };

          // 繪製路線
          directionsService.route(request, function (result, status) {
            if (status == 'OK') {
              let leg = result.routes[0].legs[0];
              
              // 接單按鈕
              const deliveryBtn = document.querySelector('.delivery')
              if (deliveryBtn !== null){
                deliveryBtn.remove();
                StartMarker.setMap(null);
                EndMarker.setMap(null);
              };

              const delivery = document.createElement('div');
              delivery.classList.add('btn')
              delivery.classList.add('delivery')
              delivery.innerText = '接單'

              document.querySelector('.main').appendChild(delivery)

              // 導航起終點標記
              marker.setMap(null);
              const StartMarker = new google.maps.Marker({
                position: leg.start_location,
                map: map,
                icon: icons.start,
                animation: google.maps.Animation.BOUNCE
              })
              const EndMarker = new google.maps.Marker({
                position: leg.end_location,
                map: map,
                animation: google.maps.Animation.DROP
              })
              
              directionsDisplay.setDirections(result);

              delivery.onclick = function(){
                delivery.remove();
                leg.steps.map((step) => {
                const steps = document.createElement('div')
                steps.classList.add('steps')
                steps.innerHTML = `<p>${step.instructions}</p>`
                document.querySelector('.steps-list').appendChild(steps)
                })

                // 導航按鈕
                const navigationBtn = document.querySelector('.main .navigation')
                const stepsList = document.querySelector('.steps-list')
                if (navigationBtn !== null){
                  navigationBtn.remove();
                  stepsList.innerHTML = '';
                };

                const navigation = document.createElement('a');
                navigation.classList.add('btn');
                navigation.classList.add('navigation');
                navigation.innerText = '開啟google map';
                navigation.onclick = function(e){
                  window.open(
                    `https://www.google.com/maps/dir/?api=1&origin=${lat},${lng}&destination=${destinationInput.value}&destination_place_id=${place.place_id}&travelmode=driving&dir_action=navigate`,
                    '_blank'
                  );
                }
                document.querySelector('.main').appendChild(navigation)

                // 使用者定位
                navigator.geolocation.watchPosition((position) => {
                  console.log('watchPosition')
                  lat = position.coords.latitude
                  lng = position.coords.longitude
                  console.log(lat, lng)

                  request = {
                    origin: { lat: lat, lng: lng },
                    destination: { placeId: place.place_id },
                    avoidFerries: true,
                    avoidHighways: true,
                    avoidTolls: true,
                    travelMode: 'DRIVING'
                  };

                  directionsService.route(request, function (result, status){
                    console.log('renderRoute')
                    if (status == 'OK') {
                      leg = result.routes[0].legs[0];
                      const newLatlng = new google.maps.LatLng(lat, lng)
                      StartMarker.setPosition(newLatlng);
                      directionsDisplay.setDirections(result);
                      stepsList.innerHTML = '';
                      leg.steps.map((step) => {
                        const steps = document.createElement('div')
                          steps.classList.add('steps')
                          steps.innerHTML = `<p>${step.instructions}</p>`
                          document.querySelector('.steps-list').appendChild(steps)
                      })
                    } else {
                      console.log(status);
                    }
                  })
                });
              }
            } else {
              console.log(status);
            }
          });
        }    
      })
    }
  </script>
</html>